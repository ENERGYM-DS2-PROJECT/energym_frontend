name: Deployment
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: Bump Version
        default: v1.0.0
        required: true
permissions:
  id-token: write
  contents: read

defaults: 
  run:
    shell: bash
    working-directory: ./

jobs: 
  deploy_production:
    name: 'Deploy to production'
    runs-on: ubuntu-latest
    env: 
      IMAGE_TAG: ${{ format('{0}_{1}', github.event.repository.name, github.sha ) }}
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_REACT_APP_API_URL: ${{ vars.envkey_REACT_APP_API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::064299454727:role/energym-oidc-role
          role-session-name: energym_oidc_deployment
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: push-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: energym
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ vars.HOSTNAME  }}
            USER_NAME : ${{ vars.USER_NAME  }}
            ACC_ID: ${{vars.DEVOPS_INTEGRATION_USER_ACC_ID}}
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin '${ACC_ID}.dkr.ecr.us-east-2.amazonaws.com'
            docker pull '${ACC_ID}.dkr.ecr.us-east-2.amazonaws.com/energym:${IMAGE_TAG}'
            docker stop energym-frontend
            docker rm energym-frontend
            docker run -d -p 8002:80 --name energym-frontend -i -t '${ACC_ID}.dkr.ecr.us-east-2.amazonaws.com/energym:${IMAGE_TAG}'
            docker image prune -a -f
          '